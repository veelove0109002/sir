name: Build AdGuardHome for iStoreOS

# 创建日期：2025-09-02

on:
  workflow_dispatch:
    inputs:
      target_arch:
        description: '目标架构'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - aarch64_cortex-a53
          - aarch64_generic
      sdk_version:
        description: 'SDK 版本标记（用于文件名和标签）'
        required: true
        default: '22.03.7'
      openssl_tag:
        description: 'OpenSSL 标记（用于标签）'
        required: true
        default: 'libopenssl_1.1'
      build_option:
        description: '构建选项'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - full

permissions:
  contents: write

jobs:
  build:
    name: 构建 AdGuardHome 安装包
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 获取日期
        id: date
        run: echo "date=$(date)" >> "$GITHUB_OUTPUT"

      - name: 准备环境
        run: |
          sudo apt-get update
          sudo apt-get install -y makeself unzip curl jq
          rm -rf artifact/installer
          mkdir -p adguardhome-ipk artifact/installer staging

      - name: 下载 AdGuardHome 包并解析版本
        id: fetch
        run: |
          set -e
          curl_gh() { curl -fsSL -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "$@"; }
          # 架构映射
          case "${{ inputs.target_arch }}" in
            x86_64) ARCH_MAP="x86_64" ;;
            aarch64_cortex-a53) ARCH_MAP="aarch64_cortex-a53" ;;
            *) ARCH_MAP="aarch64_generic" ;;
          esac
          echo "ARCH_MAP=$ARCH_MAP" >> "$GITHUB_ENV"

          # 使用固定版本
          LATEST_VERSION="1.8-11"
          echo "LATEST_VERSION=$LATEST_VERSION" >> "$GITHUB_ENV"
          echo "version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"

          # 直接下载 IPK 文件
          mkdir -p adguardhome-ipk
          
          # 使用新的IPK包URL
          APP_URL="https://github.com/veelove0109002/adg/releases/download/luci-app-adguardhome-x86_64-12/luci-app-adguardhome_1.8-11_all.ipk"
          echo "下载主程序包: $APP_URL"
          if ! curl -fL "$APP_URL" -o "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk"; then
            echo "下载失败: 未找到可用的 AdGuardHome 主程序包"
            exit 1
          fi
          
          # 设置下载成功标志
          DOWNLOAD_SUCCESS=true
          
          # 检查文件大小
          echo "检查下载的文件大小..."
          ls -lh "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk"
          FILE_SIZE=$(stat -c%s "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk" 2>/dev/null || ls -l "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk" | awk '{print $5}')
          echo "文件大小: $FILE_SIZE 字节"
          
          if [ -s "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk" ]; then
            echo "IPK文件大小正常"
          else
            echo "错误: 下载的IPK文件大小为0"
            exit 1
          fi
          
          # 显示文件信息
          echo "下载的文件信息:"
          ls -lh "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk"
          file "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk" 2>/dev/null || echo "file命令不可用"
          
          # 跳过ar验证，只检查文件是否存在且大小不为0
          if [ -s "adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk" ]; then
            echo "文件已下载，大小正常"
          else
            echo "警告: 文件可能有问题，但将继续尝试"
          fi
          
          # 下载中文语言包
          I18N_URL="https://github.com/veelove0109002/adg/releases/download/luci-app-adguardhome-x86_64-11/luci-i18n-adguardhome-zh-cn_1.8-11_all.ipk"
          echo "下载中文语言包: $I18N_URL"
          if ! curl -fL "$I18N_URL" -o "adguardhome-ipk/luci-i18n-adguardhome-zh-cn_1.8-11_all.ipk"; then
            echo "警告: 未找到中文语言包，将继续安装"
          fi

          echo "已下载文件："
          ls -lh adguardhome-ipk | sed -n '1,200p'

      - name: 定位 luci 顶层包
        id: locate
        run: |
          set -e
          # 直接使用已下载的文件
          APP_PKG="adguardhome-ipk/luci-app-adguardhome_1.8-11_all.ipk"
          I18N_PKG="adguardhome-ipk/luci-i18n-adguardhome-zh-cn_1.8-11_all.ipk"
          
          # 检查主程序包是否存在
          if [ ! -f "$APP_PKG" ]; then
            echo "错误: 未找到 luci-app-adguardhome 顶层包"
            find adguardhome-ipk -maxdepth 2 -type f -name '*.ipk' -print
            exit 1
          fi
          
          # 检查语言包（可选）
          HAS_I18N="false"
          if [ -f "$I18N_PKG" ]; then
            echo "找到中文语言包"
            HAS_I18N="true"
          else
            echo "警告: 未找到 zh-cn 语言包，将继续安装"
            # 设置一个空值，避免后续错误
            I18N_PKG=""
          fi

          echo "APP_PKG_PATH=$APP_PKG" >> "$GITHUB_ENV"
          echo "I18N_PKG_PATH=$I18N_PKG" >> "$GITHUB_ENV"
          echo "HAS_I18N=$HAS_I18N" >> "$GITHUB_ENV"
          echo "app_path=$APP_PKG" >> "$GITHUB_OUTPUT"
          echo "i18n_path=$I18N_PKG" >> "$GITHUB_OUTPUT"
          echo "has_i18n=$HAS_I18N" >> "$GITHUB_OUTPUT"

          echo "定位结果："
          ls -lh "$APP_PKG" || true
          [ -n "$I18N_PKG" ] && ls -lh "$I18N_PKG" || echo "无语言包"

      - name: 设置 AdGuardHome 版本号（用于命名）
        id: parsever
        run: |
          set -e
          # 直接使用固定版本号
          APPVER="1.8-11"
          echo "appver=$APPVER" >> "$GITHUB_OUTPUT"
          echo "APP_VERSION=$APPVER" >> "$GITHUB_ENV"

      - name: 构建 Makeself 安装包（完全对齐样例结构/逻辑）
        run: |
          set -e
          ARCH_MAP="${ARCH_MAP:-${{ inputs.target_arch }}}"
          LATEST_VERSION="${LATEST_VERSION:-${{ steps.fetch.outputs.version }}}"
          APP_VERSION="${APP_VERSION:-${{ steps.parsever.outputs.appver }}}"
          SDK_VERSION="${{ inputs.sdk_version }}"
          OPENSSL_TAG="${{ inputs.openssl_tag }}"
          APP_PKG_PATH="${APP_PKG_PATH:-${{ steps.locate.outputs.app_path }}}"
          I18N_PKG_PATH="${I18N_PKG_PATH:-${{ steps.locate.outputs.i18n_path }}}"
          HAS_I18N="${HAS_I18N:-${{ steps.locate.outputs.has_i18n }}}"

          echo "将打包的顶层包："
          ls -lh "$APP_PKG_PATH" || true
          [ -n "$I18N_PKG_PATH" ] && [ -f "$I18N_PKG_PATH" ] && ls -lh "$I18N_PKG_PATH" || echo "无语言包"

          STAGING_ROOT="staging"
          STAGING_DIR="$STAGING_ROOT/$ARCH_MAP"
          DEP_DIR="$STAGING_DIR/depends"
          rm -rf "$STAGING_DIR"
          mkdir -p "$DEP_DIR"

          # 复制为固定文件名，避免通配匹配
          APP_BASE="$(basename "$APP_PKG_PATH")"
          cp -f "$APP_PKG_PATH" "$STAGING_DIR/$APP_BASE"
          
          # 验证IPK文件并复制
          echo "验证IPK文件 $APP_PKG_PATH 完整性..."
          if [ -s "$APP_PKG_PATH" ]; then
            echo "IPK文件大小正常"
            cp -f "$APP_PKG_PATH" "$STAGING_DIR/luci-app-adguardhome.ipk"  # 固定名称，不要包含路径
            
            # 显示文件信息
            echo "复制后的文件信息:"
            ls -lh "$STAGING_DIR/luci-app-adguardhome.ipk"
            file "$STAGING_DIR/luci-app-adguardhome.ipk" 2>/dev/null || echo "file命令不可用"
          else
            echo "错误: IPK文件 $APP_PKG_PATH 大小为0或不存在"
            exit 1
          fi
          
          # 仅当语言包存在时复制
          if [ "$HAS_I18N" = "true" ] && [ -n "$I18N_PKG_PATH" ] && [ -f "$I18N_PKG_PATH" ]; then
            I18N_BASE="$(basename "$I18N_PKG_PATH")"
            cp -f "$I18N_PKG_PATH" "$STAGING_DIR/$I18N_BASE"
            cp -f "$I18N_PKG_PATH" "$STAGING_DIR/luci-i18n-adguardhome-zh-cn.ipk"  # 固定名称
          fi

          # 其余 ipk 全部放入 depends
          while IFS= read -r -d '' f; do
            b="$(basename "$f")"
            if [ "$b" != "$APP_BASE" ] && [ "$b" != "$I18N_BASE" ]; then
              cp -f "$f" "$DEP_DIR/$b"
            fi
          done < <(find adguardhome-ipk -type f -name '*.ipk' -print0)

          echo "打包目录预览："
          find "$STAGING_DIR" -maxdepth 2 -type f -print | sed -n '1,200p'

          # 生成安装脚本（使用固定文件名，不再通配）
          cat > "$STAGING_DIR/install.sh" <<'EOF'
          #!/bin/sh
          set -e

          # 检查并安装 AdGuardHome 必需依赖
          check_adguardhome_deps() {
            echo "检查 AdGuardHome 必需依赖..."
            
            # 常用依赖
            local deps="ca-bundle ca-certificates openssl-util curl wget"
            
            for dep in $deps; do
              if ! opkg list-installed | grep -q "^$dep "; then
                echo "安装缺失依赖: $dep"
                opkg install "$dep" 2>/dev/null || echo "警告: 无法安装 $dep，可能需要手动处理"
              fi
            done
          }

          # 温和地刷新 LuCI 缓存（不重启服务，避免丢失登录状态）
          refresh_luci() {
            # 清理缓存文件
            rm -f /tmp/luci-indexcache 2>/dev/null || true
            rm -rf /tmp/luci-modulecache/* 2>/dev/null || true
            
            # 优先使用 luci-reload（如果可用）
            if command -v luci-reload >/dev/null 2>&1; then
              echo "使用 luci-reload 刷新 LuCI..."
              luci-reload 2>/dev/null || true
            else
              # 使用 Lua 直接重建索引（兼容不同版本函数名）
              if command -v lua >/dev/null 2>&1; then
                echo "使用 Lua 重建 LuCI 索引..."
                lua -e 'local ok,d=pcall(require,"luci.dispatcher"); if ok and d then if d.rebuild_index then d.rebuild_index() elseif d.createindex then d.createindex() end end' 2>/dev/null || true
              fi
              
              # 温和地重载 HTTP 服务（不重启）
              if [ -x /etc/init.d/uhttpd ]; then
                echo "重载 uhttpd..."
                /etc/init.d/uhttpd reload 2>/dev/null || true
              fi
              if [ -x /etc/init.d/nginx ]; then
                echo "重载 nginx..."
                /etc/init.d/nginx reload 2>/dev/null || true
              fi
            fi
            
            # 确保文件系统同步
            sync
          }

          # 使用固定文件名，不再通配
          APP_PKG="./luci-app-adguardhome.ipk"
          I18N_PKG="./luci-i18n-adguardhome-zh-cn.ipk"

          if [ ! -f "$APP_PKG" ]; then
            echo "错误: 缺少 $APP_PKG"
            ls -l
            exit 1
          fi

          # 安装前轻度刷新
          refresh_luci

          if ! opkg update; then
            echo "更新软件源列表错误，请检查路由器网络以及软件源。"
            exit 1
          fi

          # 安装基础依赖（容错）
          echo "安装基础依赖..."
          opkg install luci-compat luci-lib-jsonc libuci-lua 2>/dev/null || true

          # 检查并安装 AdGuardHome 必需依赖
          check_adguardhome_deps

          # 安装 depends 下的 ipk（若存在）
          if [ -d depends ] && ls depends/*.ipk >/dev/null 2>&1; then
            echo "安装依赖包..."
            opkg install depends/*.ipk || true
          fi

          # 始终强制重装，避免版本判断带来的不确定性
          echo "安装 AdGuardHome 主程序..."
          echo "检查IPK文件..."
          file "$APP_PKG" || echo "file命令不可用"
          
          # 尝试解压IPK文件到临时目录进行检查
          echo "尝试解压IPK文件进行检查..."
          TEMP_DIR="/tmp/adguardhome_check"
          mkdir -p "$TEMP_DIR"
          if ! tar -C "$TEMP_DIR" -xf "$APP_PKG" 2>/dev/null; then
            echo "警告: 无法使用tar解压IPK文件，尝试使用ar命令..."
            if command -v ar >/dev/null 2>&1; then
              ar x "$APP_PKG" -C "$TEMP_DIR" 2>/dev/null || echo "ar命令解压失败"
            else
              echo "ar命令不可用"
            fi
          fi
          
          # 显示临时目录内容
          echo "解压后的文件内容:"
          ls -la "$TEMP_DIR" || echo "无法列出临时目录内容"
          
          # 尝试安装
          echo "尝试安装IPK文件: $APP_PKG"
          if opkg install "$APP_PKG" --force-reinstall --nodeps; then
            echo "安装成功!"
          else
            echo "使用--nodeps选项安装失败，尝试使用--force-depends选项..."
            if opkg install "$APP_PKG" --force-reinstall --force-depends; then
              echo "使用--force-depends选项安装成功!"
            else
              echo "安装失败，尝试检查文件..."
              ls -la
              echo "错误: 无法安装 AdGuardHome 主程序"
              
              # 尝试使用其他方法安装
              echo "尝试使用tar直接解压IPK内容..."
              mkdir -p /tmp/adguardhome_extract
              cd /tmp/adguardhome_extract
              
              # 尝试解压并手动安装
              if tar -xzf "$APP_PKG" 2>/dev/null; then
                echo "成功解压IPK文件，尝试手动安装..."
                if [ -f "./data.tar.gz" ]; then
                  tar -xzf ./data.tar.gz -C / && echo "手动安装成功!" || echo "手动安装失败"
                else
                  echo "未找到data.tar.gz文件"
                fi
              else
                echo "无法解压IPK文件"
              fi
              
              cd - >/dev/null
              exit 1
            fi
          fi

          # 安装中文语言包（仅本地文件）
          if [ -f "$I18N_PKG" ]; then
            echo "安装中文语言包: $I18N_PKG"
            opkg install "$I18N_PKG" || true
          else
            echo "未发现本地中文语言包，跳过安装"
          fi

          # 修复AdGuardHome目录问题
          if [ -f /usr/bin/AdGuardHome ] && [ ! -d /usr/bin/AdGuardHome ]; then
            echo "检测到/usr/bin/AdGuardHome是文件而非目录，进行修复..."
            # 备份原文件
            mv /usr/bin/AdGuardHome /usr/bin/AdGuardHome.bak
            # 创建目录
            mkdir -p /usr/bin/AdGuardHome
            # 将备份文件移动到目录中
            mv /usr/bin/AdGuardHome.bak /usr/bin/AdGuardHome/AdGuardHome
            # 设置执行权限
            chmod +x /usr/bin/AdGuardHome/AdGuardHome
            echo "修复完成"
          fi

          # 确保配置目录存在
          mkdir -p /etc/AdGuardHome 2>/dev/null || true
          
          # 修复缺失的resolv.conf.auto文件问题
          if [ ! -f /tmp/resolv.conf.auto ]; then
            echo "修复缺失的/tmp/resolv.conf.auto文件..."
            # 创建一个空的resolv.conf.auto文件
            touch /tmp/resolv.conf.auto
            # 如果存在resolv.conf，则复制其内容
            if [ -f /tmp/resolv.conf ]; then
              cp /tmp/resolv.conf /tmp/resolv.conf.auto
            else
              # 添加一些默认的DNS服务器
              echo "nameserver 223.5.5.5" > /tmp/resolv.conf.auto
              echo "nameserver 119.29.29.29" >> /tmp/resolv.conf.auto
            fi
            echo "已创建/tmp/resolv.conf.auto文件"
          fi
          
          # 启用并启动服务
          if [ -x /etc/init.d/AdGuardHome ]; then
            echo "启用 AdGuardHome 服务..."
            /etc/init.d/AdGuardHome enable 2>/dev/null || true
            /etc/init.d/AdGuardHome start 2>/dev/null || true
          fi
          
          # 检查AdGuardHome是否正常运行
          echo "检查AdGuardHome状态..."
          if [ -f /usr/bin/AdGuardHome/AdGuardHome ]; then
            echo "AdGuardHome二进制文件存在"
          else
            echo "警告: AdGuardHome二进制文件不存在，尝试修复..."
            # 尝试从备份恢复
            if [ -f /usr/bin/AdGuardHome.bak ]; then
              mkdir -p /usr/bin/AdGuardHome
              cp /usr/bin/AdGuardHome.bak /usr/bin/AdGuardHome/AdGuardHome
              chmod +x /usr/bin/AdGuardHome/AdGuardHome
              echo "从备份恢复完成"
            fi
          fi
          
          # 安装后轻度刷新
          refresh_luci

          # 验证安装结果
          if [ -f /usr/lib/lua/luci/controller/AdGuardHome.lua ] || ls /usr/lib/lua/luci/controller/AdGuardHome/*.lua >/dev/null 2>&1; then
            echo "✓ 安装完成！请在 LuCI 界面 服务→AdGuardHome 查看。"
            echo "  如果菜单未显示，请刷新浏览器或重新登录 LuCI。"
            exit 0
          else
            echo "! 警告：未检测到 AdGuardHome 控制器文件，可能需刷新浏览器或重新登录 LuCI。"
            exit 0
          fi
          EOF
          chmod +x "$STAGING_DIR/install.sh"

          OUTPUT="AdGuardHome_${APP_VERSION}_${ARCH_MAP}_all_sdk_${SDK_VERSION}.run"
          LABEL="AdGuardHome_${APP_VERSION}_with_sdk_${SDK_VERSION}_${OPENSSL_TAG}"
          makeself --gzip --nox11 "$STAGING_DIR" "$OUTPUT" "$LABEL" ./install.sh

          echo "AdGuardHome(luci-app)版本: $APP_VERSION" > version.txt
          echo "上游Release Tag: $LATEST_VERSION" >> version.txt
          echo "SDK版本: $SDK_VERSION" >> version.txt
          echo "OpenSSL标记: $OPENSSL_TAG" >> version.txt
          echo "构建时间: ${{ steps.date.outputs.date }}" >> version.txt
          echo "目标架构: ${{ inputs.target_arch }}" >> version.txt
          echo "GitHub Actions运行ID: ${{ github.run_id }}" >> version.txt
          echo "构建选项: ${{ inputs.build_option }}" >> version.txt

          rm -rf artifact/installer/*
          mv -f "$OUTPUT" artifact/installer/
          mv -f version.txt artifact/installer/
          echo "构建产物："
          ls -lh artifact/installer/

      - name: 上传安装程序
        uses: actions/upload-artifact@v4
        with:
          name: AdGuardHome_${{ steps.parsever.outputs.appver }}_${{ inputs.target_arch }}_all_sdk_${{ inputs.sdk_version }}
          path: ./artifact/installer/

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          tag_name: adguardhome-${{ inputs.target_arch }}-${{ steps.parsever.outputs.appver }}-${{ github.run_id }}
          name: AdGuardHome ${{ steps.parsever.outputs.appver }} for iStoreOS (${{ inputs.target_arch }})
          files: |
            artifact/installer/AdGuardHome_${{ steps.parsever.outputs.appver }}_${{ inputs.target_arch }}_all_sdk_${{ inputs.sdk_version }}.run
            artifact/installer/version.txt
          body: |
            ## AdGuardHome ${{ steps.parsever.outputs.appver }} for iStoreOS - ${{ inputs.target_arch }}
            
            AdGuardHome(luci-app)版本: ${{ steps.parsever.outputs.appver }}
            上游Release Tag: ${{ steps.fetch.outputs.version }}
            SDK版本: ${{ inputs.sdk_version }}
            OpenSSL标记: ${{ inputs.openssl_tag }}
            构建时间: ${{ steps.date.outputs.date }}
            目标架构: ${{ inputs.target_arch }}
            GitHub Actions运行ID: ${{ github.run_id }}
            构建选项: ${{ inputs.build_option }}
            
            ### 安装方法
            
            1. 下载 `AdGuardHome_${{ steps.parsever.outputs.appver }}_${{ inputs.target_arch }}_all_sdk_${{ inputs.sdk_version }}.run` 到路由器
            2. 执行 `chmod +x AdGuardHome_${{ steps.parsever.outputs.appver }}_${{ inputs.target_arch }}_all_sdk_${{ inputs.sdk_version }}.run && ./AdGuardHome_${{ steps.parsever.outputs.appver }}_${{ inputs.target_arch }}_all_sdk_${{ inputs.sdk_version }}.run`
            3. 完成后，在LuCI界面中访问 服务→AdGuardHome
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}